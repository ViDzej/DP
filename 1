// Načtení potřebných knihoven
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <HTTPClient.h>
#include <OneWire.h>
#include <DallasTemperature.h>


// Určení pinu pro měření vzdálenosti (vysílací a přijímací pin)
#define trigPin 18
#define echoPin 19

// Pin pro připojení teplotního čidla DS18B20
const int oneWireBus = 4;

//Nastavení instance knihovny oneWire pro komunikaci se zařízeními oneWire 
OneWire oneWire(oneWireBus);

// Připojení knihovny DallasTemperature (DS18B20) k instanci oneWire
DallasTemperature sensors(&oneWire);

// Přihlašovací údaje k WiFi
const char* ssid = "tplink-ja";
const char* password = "eliskaja";

// Vstupní parametry 
const char* PARAM_INPUT_1 = "output";
const char* PARAM_INPUT_2 = "state";

const char* FORM_INPUT_1 = "nadrz1000";
const char* FORM_INPUT_2 = "nadrz600";
const char* FORM_INPUT_3 = "input3";

int nadrz1000 = 0;
int nadrz600 = 0;
int input3 = 0;

const char* JSONPage = "192.168.0.100/JSON";

// Nastavení časovačů
unsigned long lastTime = 0;
unsigned long timerDelay = 10000;


// Vytvoření objektu AsyncWebServer na portu 80
AsyncWebServer server(80);

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <meta charset="UTF-8">
  <title>ESP Web Server</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="data:,">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center;}
    h2 {font-size: 3.0rem;}
    p {font-size: 3.0rem;}
    body {max-width: 600px; margin:0px auto; padding-bottom: 25px;}
    .switch {position: relative; display: inline-block; width: 120px; height: 68px} 
    .switch input {display: none}
    .slider {position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: #ccc; border-radius: 50px}
    .slider:before {position: absolute; content: ""; height: 52px; width: 52px; left: 8px; bottom: 8px; background-color: #fff; -webkit-transition: .4s; transition: .4s; border-radius: 50px}
    input:checked+.slider {background-color: #008000}
    input:checked+.slider:before {-webkit-transform: translateX(52px); -ms-transform: translateX(52px); transform: translateX(52px)}
  </style>
</head>
<body>
<div class="topnav">
  <a href="/"><img src="root.png" alt="HOME"></a>
  <a href="/settings"><img src="settings.png" alt="SETTINGS"></a>
  <a href="/JSON"><img src="json.png" alt="JSON"></a>
</div>

<div class="row">
  <div class="content">
    <font size="6px" align="center"><h1>  Hlavní stránka </h1></font>
      <font size="5px" align="center">
      <p>
  AKTUÁLNÍ HODNOTY
  <p>OBJEM  
  <p><span id="volume">%VOLUME%</span> l</p>
      </p>
  <p>TEPLOTA
  <p><span id="temperaturec">%TEMPERATUREC%</span> °C</p>
      </p>
      <font size="5px" align="center"><h2>  Spínač čerpadla </h2></font>
      <font size="5px" align="center">
      <p>
  %BUTTONPLACEHOLDER%
<script>function toggleCheckbox(element) {
  var xhr = new XMLHttpRequest();
  if(element.checked){ xhr.open("GET", "/update?output="+element.id+"&state=1", true); }
  else { xhr.open("GET", "/update?output="+element.id+"&state=0", true); }
  xhr.send();
}


setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("volume").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/volume", true);
  xhttp.send();
}, 1000) ;

setInterval(function ( ) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("temperaturec").innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", "/temperaturec", true);
  xhttp.send();
}, 1000) ;


</script>

</p>
      

  <font size="5px" align="center"><h2>  Odčerpání X litrů </h2></font>
      <p>
    <form action="/get">
        Odčerpat vodu [l]:    <input type="number" name="input3">
                      <input type="submit" value="Submit">
    </form>
      </p>
      
      <font size="5px" align="center"><h2>  Stav čerpadla </h2></font>
      <font size="5px" align="center">
  
       STAV ČERPADLA (V PROVOZU / MIMO PROVOZ)
  </br>OZNAČIT I BAREVNĚ? (js?)
  </br>DŮVOD CHODU? (VYPSAT, KTERÁ FUNKCE DRŽÍ ČERPADLO V CHODU)

      </font>
      

</font>
  </div>
  
  </div>
</div>

</body>
</html>
)rawliteral";


// Replaces placeholder with DHT values
String processorTemp(const String& var) {
  //Serial.println(var);
  if (var == "TEMPERATUREC") {
    return readDSTemperatureC();
  }
  return String();
}

// Replaces placeholder with DHT values
String processorDist(const String& var) {
  //Serial.println(var);
  if (var == "VOLUME") {
    return readVolume();
  }
  return String();
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////

const char settings_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <meta charset="UTF-8">
  <title>ESP Web Server</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="data:,">
</head>
<body>
<a href = "/">HOME</a>
<a href = "/JSON">JSON</a>
  SETTINGS
  
    <form action = "/get">
      Nádrže 1000 l: 
        <input type="number" min="0" id="nadrz1000" name="nadrz1000">
        <input type="submit" value="Submit">
    </form>
    
    <form action = "/get">
      Nádrže 600 l: 
        <input type="number" min="0" id="nadrz600" name="nadrz600">
        <input type="submit" value="Submit">
    </form>
  
</body>
</html>
)rawliteral";

/////////////////////////////////////////////////////////////////////////////////////////////////////////

const char JSON_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <meta charset="UTF-8">
  <title>ESP Web Server</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" href="data:,">
</head>
<body>
<a href = "/">HOME</a>
<a href = "/settings">SETTINGS</a>
  JSON
  </body>
</html>
)rawliteral";

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// Funkce pro nastavení maximální výšky hladiny podle nastavené nádrže
unsigned long getMaxHladina(){
unsigned long maxHladina;
  if(nadrz600>0){
    maxHladina = 95;
  }
  else if(nadrz1000 > 0){
    maxHladina = 105;  
  }
  else{
    maxHladina = 999;  
  }
  return maxHladina;
}

// Funkce pro získávání teploty z teplotního čidla DS18B20
String readDSTemperatureC() {
  // Call sensors.requestTemperatures() to issue a global temperature and Requests to all devices on the bus
  sensors.requestTemperatures();
  float tempC = sensors.getTempCByIndex(0);

  if (tempC == -127.00) {
    Serial.println("Failed to read from DS18B20 sensor");
    return "--";
  } else {
    //Serial.print("Temperature Celsius: ");
    Serial.println(tempC);
  }
  return String(tempC);
}

bool trigMax = false;

// Funkce pro získávání hodnoty objemu v nádrži
String readVolume() {
  long duration, distance, volume;
  digitalWrite(trigPin, LOW);  // Added this line
  delayMicroseconds(2); // Added this line
  digitalWrite(trigPin, HIGH);
//  delayMicroseconds(1000); - Removed this linex;
  delayMicroseconds(10); // Added this line
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration/2) / 29.1;
  if (distance >= 500 || distance <= 0){
    Serial.println("Out of range");
  }
  else {
    Serial.print(distance);
    Serial.println(" cm");
  }
  
  volume=(117.5 - distance) * 8.51;

  if (distance > getMaxHladina()){
    trigMax=true;
  }
  else{
    trigMax=false;  
  }
  
  
  return String(volume);
}


// Nastavení funkce vypínače pro spínání čerpadla
String processor(const String& var){
  //Serial.println(var);
  if(var == "PLACEHOLDER"){
    String buttons = "";
    buttons += "<label class=\"switch\"><input type=\"checkbox\" onchange=\"toggleCheckbox(this)\" id=\"2\" " + outputState(2) + "><span class=\"slider\"></span></label>";
    return buttons;
  }
  return String();
}

String outputState(int output){
  if(digitalRead(output)){
    return "checked";
  }
  else {
    return "";
  }
}

  void notFound(AsyncWebServerRequest *request) {
    request->send(404, "text/plain", "Not found");
  }

void setup(){
  // Otevření sériového portu 
  Serial.begin(9600);
  Serial.println();
  
// Inicializace senzoru DS18B20
  sensors.begin();
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  
  pinMode(2, OUTPUT);
  digitalWrite(2, LOW);
  pinMode(4, OUTPUT);
  digitalWrite(4, LOW);
  pinMode(5, OUTPUT);
  digitalWrite(5, LOW);
  pinMode(33, OUTPUT);
  digitalWrite(33, LOW);
  
  // Připojení k WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  // Výpis IP adresy po přihlášení
  Serial.println(WiFi.localIP());

  // Cesta kořenové "/" stránky  
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });
  
  // GET request - Teplota
  server.on("/temperaturec", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send_P(200, "text/plain", readDSTemperatureC().c_str());
  });

  
  // GET request - Objem
  server.on("/volume", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send_P(200, "text/plain", readVolume().c_str());
  });

  // Cesta stránky nastavení /Settings 
  server.on("/settings", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", settings_html, processorTemp);
  });

  // Cesta stránky JSON /JSON web page
  server.on("/JSON", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", JSON_html, processor);
  });

  // Odesílání GET request na <ESP_IP>/update?output=<inputMessage1>&state=<inputMessage2>
  server.on("/update", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage1;
    String inputMessage2;
    // GET input1 value on <ESP_IP>/update?output=<inputMessage1>&state=<inputMessage2>
    if (request->hasParam(PARAM_INPUT_1) && request->hasParam(PARAM_INPUT_2)) {
      inputMessage1 = request->getParam(PARAM_INPUT_1)->value();
      inputMessage2 = request->getParam(PARAM_INPUT_2)->value();
      digitalWrite(inputMessage1.toInt(), inputMessage2.toInt());
    }
    else {
      inputMessage1 = "No message sent";
      inputMessage2 = "No message sent";
    }
    Serial.print("GPIO: ");
    Serial.print(inputMessage1);
    Serial.print(" - Set to: ");
    Serial.println(inputMessage2);
    request->send(200, "text/plain", "OK");
  });



// Získání hodnot počtu využívaných nádrží
 server.on("/get", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage;
    String inputParam;
    // GET nadrz1000 value on <ESP_IP>/get?nadrz1000=<inputMessage>
    if (request->hasParam(FORM_INPUT_1)) {
      Serial.println("IN GET nadrz1000");
      inputMessage = request->getParam(FORM_INPUT_1)->value();
      inputParam = FORM_INPUT_1;
      nadrz1000 = (request->getParam(FORM_INPUT_1)->value()).toInt();
    }
    // GET nadrz600 value on <ESP_IP>/get?nadrz600=<inputMessage>
    else if (request->hasParam(FORM_INPUT_2)) {
      Serial.println("IN GET nadrz600");
      inputMessage = request->getParam(FORM_INPUT_2)->value();
      inputParam = FORM_INPUT_2;
      nadrz600 = (request->getParam(FORM_INPUT_2)->value()).toInt();
    }
    // GET input3 value on <ESP_IP>/get?input3=<inputMessage>
    else if (request->hasParam(FORM_INPUT_3)) {
      Serial.println("IN GET input3");
      inputMessage = request->getParam(FORM_INPUT_3)->value();
      inputParam = FORM_INPUT_3;
      input3 = (request->getParam(FORM_INPUT_3)->value()).toInt();
    }
    else {
      inputMessage = "No message sent";
      inputParam = "none";
    }
    Serial.println(inputMessage);
    request->send(200, "text/html", "Proměnné ("+ inputParam + ") byla změněna hodnota na: " + inputMessage +"<br><a href=\"/settings\">Zpět do settings</a>");
  });
  server.onNotFound(notFound);



  // Start server
  server.begin();
}

void loop() {
  sensors.requestTemperatures();
  
  if ((millis() - lastTime) > timerDelay) {
    if(WiFi.status()== WL_CONNECTED){
      HTTPClient http;
      float temperatureC = sensors.getTempCByIndex(0);
      Serial.print(temperatureC);
      Serial.println("ºC");
  
      // Your Domain name with URL path or IP address with path
      http.begin(JSONPage);

      // Určení typu obsahu headeru
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");
      // Data to send with HTTP POST
      //String httpRequestData = "api_key=tPmAT5Ab3j7F9&sensor=BME280&value1=24.25&value2=49.54&value3=1005.14";
      //String httpRequestData = "{\"api_key\":\"tPmAT5Ab3j7F9\",\"sensor\":\"BME280\",\"value1\":\"24.25\",\"value2\":\"49.54\",\"value3\":\"1005.14\"}";
      String httpRequestData = "{\"testovacizprava\"}";
      
      // Send HTTP POST request
      Serial.println(httpRequestData);
      int httpResponseCode = http.POST(httpRequestData);

      //Serial.println("httpResponseCode");
      //Serial.println(httpResponseCode);

      http.end();
    }
  lastTime = millis();
  Serial.println(FORM_INPUT_1);
  Serial.println(FORM_INPUT_2);
  Serial.println(FORM_INPUT_3);
  Serial.println(nadrz1000);
  Serial.println(nadrz600);
  Serial.println(input3);


  if(trigMax == true){
    digitalWrite(5, HIGH);
    Serial.println("digitalWrite(5, HIGH)");
  } 
  else{
    digitalWrite(5, LOW);
    Serial.println("digitalWrite(5, LOW)");
  }

  
  }
}
